install.packages(c("lubridate", "moments", "quantmod", "readxl", "reshape2", "rstudioapi", "rugarch", "tidyverse"))
dirname(sys.frame(1)$ofile)
dZeta = 1.2
dSigmaz2 = 0..5
iT = 1000
vY = rnorm(iT) * exp(0.5*rnorm(iT, dZeta, sqrt(dSigmaz2)))
dSigmaz2 = 0.5
vY = rnorm(iT) * exp(0.5*rnorm(iT, dZeta, sqrt(dSigmaz2)))
py = function(dY, dZeta, dSigmaz2) {
dInt = integrate(function(dW, dY, dZeta, dSigmaz2){
exp(-0.5 * (dW + dY^2/exp(dW) + ((dW - dZeta )^2)/dSigmaz2))
}, lower = -5, upper = 5,
dY = dY, dZeta = dZeta, dSigmaz2 = dSigmaz2)$value
return(dInt / (2*pi * sqrt(dSigmaz2)))
}
LLK = function(vPar, vY) {
dZeta =vPar[1]
dSigmaz2 = vPar[2]
dLLK = 0.0
iT = length(vY)
for (t in 1:iT) {
dLLK = dLLK + log(py(vY[t], dZeta, dSigmaz2))
}
if (!is.finite(dLLK)) {
-dLLK = -1e3
}
return(-dLLK)
}
optim(par = c(0.5, 2), nLLK, method = "L-BFGS-B",
lower = c(-2, 0.0001), upper = c(2, 1.5),
vY = vY)
nLLK = function(vPar, vY) {
dZeta =vPar[1]
dSigmaz2 = vPar[2]
dLLK = 0.0
iT = length(vY)
for (t in 1:iT) {
dLLK = dLLK + log(py(vY[t], dZeta, dSigmaz2))
}
if (!is.finite(dLLK)) {
-dLLK = -1e3
}
return(-dLLK)
}
optim(par = c(0.5, 2), nLLK, method = "L-BFGS-B",
lower = c(-2, 0.0001), upper = c(2, 1.5),
vY = vY)
dZeta_MM = 3*log(mean(vY^2)) + log(3) - log(mean(vY^4))
dSigmaz2 = 2*(log(mean(vY^4))) - log(3) - 2*log(mean(vY^2))
dSigmaz2_MM = 2*(log(mean(vY^4))) - log(3) - 2*log(mean(vY^2))
c(dZeta_MM, dSigmaz2_MM)
dSigmaz2_MM = 2*(log(mean(vY^4))) - log(3) - 2*log(mean(vY^2))
c(dZeta_MM, dSigmaz2_MM)
dZeta = 1.2
dSigmaz2 = 0.5
iT = 1000
vY = rnorm(iT) * exp(0.5*rnorm(iT, dZeta, sqrt(dSigmaz2)))
py = function(dY, dZeta, dSigmaz2) {
dInt = integrate(function(dW, dY, dZeta, dSigmaz2){
exp(-0.5 * (dW + dY^2/exp(dW) + ((dW - dZeta )^2)/dSigmaz2))
}, lower = -5, upper = 5,
dY = dY, dZeta = dZeta, dSigmaz2 = dSigmaz2)$value
return(dInt / (2*pi * sqrt(dSigmaz2)))
}
nLLK = function(vPar, vY) {
dZeta =vPar[1]
dSigmaz2 = vPar[2]
dLLK = 0.0
iT = length(vY)
for (t in 1:iT) {
dLLK = dLLK + log(py(vY[t], dZeta, dSigmaz2))
}
if (!is.finite(dLLK)) {
-dLLK = -1e3
}
return(-dLLK)
}
vPar_ML = optim(par = c(0.5, 2), nLLK, method = "L-BFGS-B",
lower = c(-2, 0.0001), upper = c(2, 1.5),
vY = vY)
vPar_ML
vPar_ML$par
# Estimating using Methods of Moments slide 10 lecure 6
dZeta_MM = 3*log(mean(vY^2)) + log(3) - log(mean(vY^4))
dSigmaz2_MM = 2*(log(mean(vY^4))) - log(3) - 2*log(mean(vY^2))
c(dZeta_MM, dSigmaz2_MM)
dSigmaz2_MM = 2*(log(mean(vY^4)) - log(3) - 2*log(mean(vY^2)))
c(dZeta_MM, dSigmaz2_MM)
c(dZeta_MM, dSigmaz2_MM)
fsim_SV <- function(iT, dOmega,
dPhi, dSigma2) {
vW = numeric(iT)
vW[1] = rnorm(1, dOmega/ ( 1- dPhi), sd = sqrt(dSigma2 / ( 1-dPhiÃ…2)))
for (t in 2:iT) {
vW[t] = dOmega + dPhi * vW[t-1] + sqrt(dSigma2) * rnorm(1)
}
vY = exp(vW/2) * rnorm(iT)
return(cbind(vY, vW, exp(vW/2)))
}
mSim = fsim_SV(iT = 1000, dOmega = 0.03, dPhi = 0.9, dSigma2 = 0.5)
fsim_SV <- function(iT, dOmega,
dPhi, dSigma2) {
vW = numeric(iT)
vW[1] = rnorm(1, dOmega/ ( 1- dPhi), sd = sqrt(dSigma2 / ( 1-dPhi^2)))
for (t in 2:iT) {
vW[t] = dOmega + dPhi * vW[t-1] + sqrt(dSigma2) * rnorm(1)
}
vY = exp(vW/2) * rnorm(iT)
return(cbind(vY, vW, exp(vW/2)))
}
mSim = fsim_SV(iT = 1000, dOmega = 0.03, dPhi = 0.9, dSigma2 = 0.5)
plot(mSim)
plot.ts(mSim)
#knitr::opts_chunk$set(fig.path="https://kroghanalytics.com//figure/garch-process/")
knitr::opts_chunk$set(echo = TRUE)
todir = "../figures"
list.files(getwd(), ".png")
setwd("~/Documents/GitHub/Millennial/_drafts")
list.files(getwd(), ".png")
getwd()
list.files(getwd()/figures, ".png")
list.files(getwd()/figure, ".png")
list.files(paste0(getwd(),"/figure"), ".png")
pics = list.files(paste0(getwd(),"/figure"), ".png")
pics = sapply(pics, function(x) paste(paste0(getwd(),"/figure"), x, sep="/"))
todir = "../images"
file.copy(pics, todir)
